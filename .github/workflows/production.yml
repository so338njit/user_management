name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12] # Define Python versions here
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --only-binary :all: pydantic
          pip install -r requirements.txt
      
      - name: Debug SMTP settings
        run: |
          echo "SMTP settings:"
          echo "Server: ${{ secrets.SMTP_SERVER }}"
          echo "Port: ${{ secrets.SMTP_PORT }}"
          echo "Converting port to integer:"
          python -c "
          try:
              port = '${{ secrets.SMTP_PORT }}'
              print(f'Port value: {port}')
              print(f'Port type: {type(port).__name__}')
              port_int = int(port) if port else 2525
              print(f'Port as int: {port_int}')
          except Exception as e:
              print(f'Error converting port: {e}')
          "
          echo "Mailtrap credentials exist:"
          echo "Username exists: ${{ secrets.SMTP_USERNAME != '' }}"
          echo "Password exists: ${{ secrets.SMTP_PASSWORD != '' }}"

      - name: Run tests with Pytest
        env:

          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb
          # Hardcoded Mailtrap settings to ensure they're correct
          SMTP_SERVER: "smtp.mailtrap.io"

          SMTP_PORT: "2525"
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          # Enable debug logging
          PYTHONVERBOSE: "1"
          PYTHONUNBUFFERED: "1"
          LOG_LEVEL: "DEBUG"
        run: |
          # Add configuration check before running tests
          python -c "
          import os
          import sys
          
          print('Python version:', sys.version)
          print('Environment variables:')
          print(f'SMTP_SERVER: {os.environ.get(\"SMTP_SERVER\")}')
          print(f'SMTP_PORT: {os.environ.get(\"SMTP_PORT\")} (type: {type(os.environ.get(\"SMTP_PORT\")).__name__})')
          
          try:
              port_as_int = int(os.environ.get(\"SMTP_PORT\", \"2525\"))
              print(f'SMTP_PORT as int: {port_as_int}')
          except Exception as e:
              print(f'Error converting port: {e}')
          
          # Check if username/password are set (without exposing them)
          print(f'SMTP_USERNAME set: {bool(os.environ.get(\"SMTP_USERNAME\"))}') 
          print(f'SMTP_PASSWORD set: {bool(os.environ.get(\"SMTP_PASSWORD\"))}')
          "
          
          # Run pytest with more verbose output
          python -m pytest -v

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: so338/user_management:${{ github.sha }} # Uses the Git SHA for tagging
          platforms: linux/amd64,linux/arm64 # Multi-platform support
          cache-from: type=registry,ref=kaw393939/wis_club_api:cache
          cache-to: type=inline,mode=max
          
      - name: Scan the Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'so338/user_management:${{ github.sha }}'
          format: 'table'
          exit-code: '1' # Fail the job if vulnerabilities are found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'